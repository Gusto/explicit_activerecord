# typed: true

# DO NOT EDIT MANUALLY
# This is an autogenerated file for types exported from the `deprecation_helper` gem.
# Please instead update this file by running `bin/tapioca gem deprecation_helper`.


# source://deprecation_helper//lib/deprecation_helper/private.rb#3
module DeprecationHelper
  class << self
    # PUBLIC API
    #
    # source://deprecation_helper//lib/deprecation_helper.rb#24
    sig { params(blk: T.proc.params(arg0: ::DeprecationHelper::Private::Configuration).void).void }
    def configure(&blk); end

    # source://deprecation_helper//lib/deprecation_helper.rb#35
    sig do
      params(
        message: ::String,
        allow_list: T::Array[::Regexp],
        deprecation_strategies: T.nilable(T::Array[::DeprecationHelper::Strategies::BaseStrategyInterface])
      ).void
    end
    def deprecate!(message, allow_list: T.unsafe(nil), deprecation_strategies: T.unsafe(nil)); end

    # This method is exposed as it might be useful for other systems that want to
    # reuse the global configuration more explicitly
    #
    # source://deprecation_helper//lib/deprecation_helper.rb#46
    sig { returns(T::Array[::DeprecationHelper::Strategies::BaseStrategyInterface]) }
    def deprecation_strategies; end

    private

    # PRIVATE API
    #
    # source://deprecation_helper//lib/deprecation_helper.rb#55
    sig { returns(::DeprecationHelper::Private::Configuration) }
    def config; end
  end
end

# source://deprecation_helper//lib/deprecation_helper/deprecation_exception.rb#4
class DeprecationHelper::DeprecationException < ::StandardError
  # source://deprecation_helper//lib/deprecation_helper/deprecation_exception.rb#8
  sig { params(message: ::String).void }
  def initialize(message); end
end

# source://deprecation_helper//lib/deprecation_helper/private.rb#4
module DeprecationHelper::Private; end

# source://deprecation_helper//lib/deprecation_helper/private/allow_list.rb#5
class DeprecationHelper::Private::AllowList
  class << self
    # source://deprecation_helper//lib/deprecation_helper/private/allow_list.rb#9
    sig { params(allowable_frames: T::Array[::Regexp], exception_frames: T::Array[::String]).returns(T::Boolean) }
    def allowed?(allowable_frames, exception_frames); end
  end
end

# source://deprecation_helper//lib/deprecation_helper/private/configuration.rb#5
class DeprecationHelper::Private::Configuration
  # source://deprecation_helper//lib/deprecation_helper/private/configuration.rb#12
  sig { void }
  def initialize; end

  # source://deprecation_helper//lib/deprecation_helper/private/configuration.rb#17
  sig { returns(T::Array[::DeprecationHelper::Strategies::BaseStrategyInterface]) }
  def deprecation_strategies; end

  # source://deprecation_helper//lib/deprecation_helper/private/configuration.rb#9
  sig { params(deprecation_strategies: T::Array[::DeprecationHelper::Strategies::BaseStrategyInterface]).void }
  def deprecation_strategies=(deprecation_strategies); end
end

# source://deprecation_helper//lib/deprecation_helper/strategies/base_strategy_interface.rb#4
module DeprecationHelper::Strategies; end

# This is the interface for all strategies
#
# @abstract Subclasses must implement the `abstract` methods below.
#
# source://deprecation_helper//lib/deprecation_helper/strategies/base_strategy_interface.rb#6
module DeprecationHelper::Strategies::BaseStrategyInterface
  interface!

  # @abstract
  #
  # source://deprecation_helper//lib/deprecation_helper/strategies/base_strategy_interface.rb#13
  sig { abstract.params(message: ::String, backtrace: T::Array[::String]).void }
  def apply!(message, backtrace); end
end

# @abstract Subclasses must implement the `abstract` methods below.
#
# source://deprecation_helper//lib/deprecation_helper/strategies/error_strategy_interface.rb#5
module DeprecationHelper::Strategies::ErrorStrategyInterface
  include ::DeprecationHelper::Strategies::BaseStrategyInterface

  abstract!

  # source://deprecation_helper//lib/deprecation_helper/strategies/error_strategy_interface.rb#13
  sig { override.params(message: ::String, backtrace: T::Array[::String]).void }
  def apply!(message, backtrace); end

  # @abstract
  #
  # source://deprecation_helper//lib/deprecation_helper/strategies/error_strategy_interface.rb#20
  sig { abstract.params(exception: ::StandardError).void }
  def apply_to_exception!(exception); end
end

# source://deprecation_helper//lib/deprecation_helper/strategies/log_error.rb#5
class DeprecationHelper::Strategies::LogError
  include ::DeprecationHelper::Strategies::BaseStrategyInterface

  # source://deprecation_helper//lib/deprecation_helper/strategies/log_error.rb#11
  sig { params(logger: T.untyped).void }
  def initialize(logger: T.unsafe(nil)); end

  # source://deprecation_helper//lib/deprecation_helper/strategies/log_error.rb#16
  sig { override.params(message: ::String, backtrace: T::Array[::String]).void }
  def apply!(message, backtrace); end
end

# source://deprecation_helper//lib/deprecation_helper/strategies/log_error_and_stacktrace.rb#5
class DeprecationHelper::Strategies::LogErrorAndStacktrace
  include ::DeprecationHelper::Strategies::BaseStrategyInterface

  # source://deprecation_helper//lib/deprecation_helper/strategies/log_error_and_stacktrace.rb#11
  sig { params(logger: T.untyped).void }
  def initialize(logger: T.unsafe(nil)); end

  # source://deprecation_helper//lib/deprecation_helper/strategies/log_error_and_stacktrace.rb#16
  sig { override.params(message: ::String, backtrace: T::Array[::String]).void }
  def apply!(message, backtrace); end
end

# This strategy raises the original error
#
# source://deprecation_helper//lib/deprecation_helper/strategies/raise_error.rb#6
class DeprecationHelper::Strategies::RaiseError
  include ::DeprecationHelper::Strategies::BaseStrategyInterface

  # source://deprecation_helper//lib/deprecation_helper/strategies/raise_error.rb#12
  sig { override.params(message: ::String, backtrace: T::Array[::String]).void }
  def apply!(message, backtrace); end
end
